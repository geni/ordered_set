#!/usr/bin/env ruby
# frozen_string_literal: true

require 'test/unit'
require 'test/unit/ui/console/outputlevel'
require 'method_source'

base_dir = File.expand_path(File.join(File.dirname(__FILE__), ".."))
test_dir = "#{base_dir}/test"

log_file = "#{base_dir}/log/test.log"
File.delete(log_file) if File.exist?(log_file)

$SKIP_COVERAGE = true
$LOAD_PATH.push base_dir

arg_path, arg_line = ARGV[0].split(':')

arg_line = arg_line.to_i

# Cribbed from https://github.com/rails/rails/blob/2f9c84a604b3288504196e23c95348221a298b35/railties/lib/rails/test_unit/runner.rb#L171
filter =  lambda do |test|
  method           = test.method(test.method_name)
  file, start_line = method.source_location

  return false unless file.include?(test_dir)
  return true if arg_line.zero?

  begin
    end_line = method.source.count("\n") + start_line + 1
  rescue EOFError
    puts "WARNING: #{method.name} doesn't parse correctly"
    return false
  end

  if file.include?(arg_path) && (start_line .. end_line).include?(arg_line)
    puts "Running: #{test.method_name}"
    return true
  end

  false
end

result = Test::Unit::AutoRunner.run(true, nil, [arg_path]) do |runner|
  # Emit test name and result
  runner.runner_options[:output_level]            = Test::Unit::UI::Console::OutputLevel::VERBOSE
  # Show results after all tests have completed
  runner.runner_options[:show_detail_immediately] = false
  runner.runner_options[:use_color]               = false

  runner.filters << filter
end

exit result

# vim: set sw=2 ts=2 et ai nowrap bg=dark ft=ruby
